704. Binary Search
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l, r =0 ,len(nums)-1
        while l<=r:
            m = (l+r)//2
            if nums[m] < target:
                l =m+1
            elif nums[m] > target:
                r=m-1
            else:
                return m
        return -1
35. Search Insert Position
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        l , r =0 , len(nums)-1
        while l<=r:
            m = (l+r)//2
            if nums[m] < target:
                l = m+1
            elif nums[m] > target:
                r=m-1
            else:
                return m
        return l
           

       
278. First Bad Version
# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        l , r = 1 , n
        while l<=r:
            m = (l+r)//2
            if isBadVersion(m) == False:
                l = m+1
            else:
                r = m-1
        return l

