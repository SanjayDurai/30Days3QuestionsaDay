226. Invert Binary Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        def dfs(root):
            if not root:
                return None
            
            root.left , root.right = root.right , root.left
            dfs(root.left) 
            dfs(root.right)
            return root
        return dfs(root)
        
257. Binary Tree Paths
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        def dfs(root, path , ans):
            if not root:
                return None
            path+=str(root.val)
            if not root.left and not root.right:
                ans.append(path)
            else:
                dfs(root.left, path + '->', ans)
                dfs(root.right, path + '->', ans)
        ans = []
        dfs(root,'',ans)
        return ans
        

Duplicate Integer
class Solution:
    def hasDuplicate(self, nums: List[int]) -> bool:
        arr = len(set(nums))
        n = len(nums)
        if n!= arr:
            return True
        else:
            return False