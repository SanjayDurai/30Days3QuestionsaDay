5. Longest Palindromic Substring
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ""
        resLen = 0

        for i in range(len(s)):
            #odd palindrome
            l, r =i,i
            while (l>=0 and r<len(s)) and (s[l] == s[r]):
                if (r-l+1) > resLen:
                    res = s[l:r+1]
                    resLen = r-l+1
                l-=1
                r+=1

            #even palindrome
            l,r = i, i+1
            while (l>=0 and r<len(s)) and (s[l] == s[r]):
                if (r-l+1) > resLen:
                    res = s[l:r+1]
                    resLen = r-l+1
                l-=1
                r+=1

        return res


 198. House Robber

class Solution:
    def rob(self, nums: List[int]) -> int:
        rob1, rob2 = 0,0
	for n in nums:
	    temp = max(n+rob1, rob2)
            rob1= rob2
	    rob2 = temp
	return rob2

213. House Robber II

class Solution:
    def rob(self, nums: List[int]) -> int:
        def helper(nums):
            rob1 , rob2 = 0, 0
            for n in nums:
                temp =max(n+rob1, rob2)
                rob1 = rob2
                rob2 = temp
            return rob2
        return max(nums[0],helper(nums[1:]),helper(nums[:-1]))
