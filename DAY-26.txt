206. Reverse Linked List
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) ->  Optional[ListNode]:
        prev =None
        curr =head
        while curr:
            nxt = curr.next
            curr.next = prev
            prev = curr
            curr= nxt
        return prev


876. Middle of the Linked List
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head : Optional[ListNode]) -> Optional[ListNode] :
        sp = head
        fp =head
        while fp and fp.next:
            sp =sp.next
            fp =fp.next.next
        return sp

19. Remove Nth Node From End of List
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummy = ListNode(0,head)
        first = dummy
        second =dummy

        for _ in range(n+1):
            first =first.next
        
        while first:
            first = first.next
            second = second.next

        second.next = second.next.next
        return dummy.next

