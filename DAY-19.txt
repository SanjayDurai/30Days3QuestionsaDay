3. Longest Substring Without Repeating Characters
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charset = set()
        l = 0
        maxl=0

        for r in range(len(s)):
            while s[r] in charset:
                charset.remove(s[l])
                l+=1
            charset.add(s[r])
            maxl = max(maxl, r-l+1)
        return maxl

8. String to Integer (atoi)
import re

class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.strip()
        match = re.match(r'^([-+]?\d+)', s)
        if not match:
            return 0
        num_str = match.group(0)    
        num = int(num_str)
        if num > 2**31 - 1:
            return 2**31 - 1
        if num < -2**31:
            return -2**31
        else:
            return num


5. Longest Palindromic Substring
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ''
        maxl = 0
        for i in range(len(s)):

            l, r = i , i
            while l>=0 and r<len(s) and s[l] == s[r]:
                if (r-l+1) > maxl:
                    res = s[l:r+1]
                    maxl = r-l+1
                l-=1
                r+=1
            
            l,r= i,i+1
            while l>=0 and r<len(s) and s[l] == s[r]:
                if (r-l+1) > maxl:
                    res = s[l:r+1]
                    maxl = r-l+1
                l-=1
                r+=1
        return res

            