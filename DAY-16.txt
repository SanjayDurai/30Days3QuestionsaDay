20. Valid Parentheses
class Solution:
    def isValid(self, s: str) -> bool:
        d = {'(':')', '{':'}', '[':']'}
        stack = []
        for i in s:
            if i in d:
                stack.append(i)
            elif len(stack) == 0 or d[stack.pop()] != i:
                return False
        return len(stack) == 0
        

232. Implement Queue using Stacks
class MyQueue:

    def __init__(self):
        self.in_stk = []
        self.out_stk =[]


    def push(self, x: int) -> None:
        self.in_stk.append(x)
        

    def pop(self) -> int:
        self.peek()
        return self.out_stk.pop()

    def peek(self) -> int:
        if not self.out_stk:
            while self.in_stk:
                self.out_stk.append(self.in_stk.pop())
        return self.out_stk[-1]


    def empty(self) -> bool:
        return not self.in_stk and not self.out_stk


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()


844. Backspace String Compare
class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        
        stk1 = []
        stk2 = []
        for i in range(len(s)):
            if s[i] =="#":
                if stk1:
                    stk1.pop()
            else:
                stk1.append(s[i])
        for i in range(len(t)):
            if t[i] == "#":
                if stk2:
                    stk2.pop()
            else:
                stk2.append(t[i])
        return stk1 == stk2
        
