303. Range Sum Query - Immutable
class NumArray:

    def __init__(self, nums: List[int]):
        self.prefix = []
        count = 0
        for n in nums:
            count+=n
            self.prefix.append(count)

    def sumRange(self, left: int, right: int) -> int:
        rightsum = self.prefix[right]
        leftsum = self.prefix[left-1] if left>0 else 0
        return rightsum - leftsum
        
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(left,right)

338. Counting Bits

class Solution:
    def countBits(self, n: int) -> List[int]:
        dp = [0]* (n+1)
        offset =1
        for i in range(1,n+1):
            if offset*2 == i:
                offset =i
            dp[i] = 1 + dp[i - offset]
        return dp

73. Set Matrix Zeroes
class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        rows = [0]*len(matrix)
        cols= [0] *len(matrix[0])
        for i in range(0,len(matrix)):
            for j in range(0,len(matrix[0])):
                if matrix[i][j] == 0:
                    rows[i] =-1
                    cols[j] = -1

        for i in range(0,len(matrix)):
            for j in range(0,len(matrix[0])):
                if rows[i] == -1 or cols[j] ==-1:
                    matrix[i][j] = 0
                    