118. Pascal's Triangle
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        res =[]

        for j in range(1,numRows+1):
            arr =[]
            ans =1
            for i in range(0,j):
                if i ==0:
                    arr.append(ans)
                    
                else:
                    ans = ans * (j-i)
                    ans = ans // i
                    arr.append(ans)
            res.append(arr)
        return res

        
21. Merge Two Sorted Lists
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        curr =dummy
        while list1 and list2:
            if list1.val < list2.val:
                curr.next = list1
                curr = list1
                list1 = list1.next 
            else:
                curr.next = list2
                curr = list2
                list2 = list2.next 
        curr.next = list1 if list1 else list2
        
        return dummy.next

141. Linked List Cycle
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        fp= head
        sp =head
        while fp and fp.next:
            sp = sp.next
            fp = fp.next.next
            if sp == fp:
                return True
        return False